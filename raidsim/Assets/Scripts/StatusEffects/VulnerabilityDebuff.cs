using UnityEngine;
using dev.susybaka.raidsim.Characters;
using static dev.susybaka.raidsim.Core.GlobalData.Damage;

namespace dev.susybaka.raidsim.StatusEffects
{
    public class VulnerabilityDebuff : StatusEffect
    {
        [Header("Function")]
        public DamageType type;
        public ElementalAspect elementalAspect;
        public PhysicalAspect physicalAspect;
        public float damageModifier = 1.2f;
        public bool multiplyWithStacks = false;

        private CharacterState lastCharacter;
        private int lastStacks = 0;

        public override void OnApplication(CharacterState state)
        {
            if (uniqueTag != 0)
            {
                state.AddDamageModifier(damageModifier, $"{data.statusName}_{uniqueTag}", type, elementalAspect, physicalAspect);
            }
            else
            {
                state.AddDamageModifier(damageModifier, data.statusName, type, elementalAspect, physicalAspect);
            }
            lastCharacter = state;
            lastStacks = stacks;
        }

        public override void OnUpdate(CharacterState state)
        {
            base.OnUpdate(state);

            if (lastStacks != stacks)
            {
                lastStacks = stacks;

                if (stacks > 1)
                {
                    if (lastCharacter != null && multiplyWithStacks)
                    {
                        if (uniqueTag != 0)
                        {
                            lastCharacter.ModifyDamageModifier(damageModifier * stacks, $"{data.statusName}_{uniqueTag}", type, elementalAspect, physicalAspect);
                        }
                        else
                        {
                            lastCharacter.ModifyDamageModifier(damageModifier * stacks, data.statusName, type, elementalAspect, physicalAspect);
                        }
                    }
                }
            }
        }

        public override void OnExpire(CharacterState state)
        {
            if (uniqueTag != 0)
            {
                state.RemoveDamageModifier($"{data.statusName}_{uniqueTag}", type, elementalAspect, physicalAspect);
            }
            else
            {
                state.RemoveDamageModifier(data.statusName, type, elementalAspect, physicalAspect);
            }
            lastCharacter = null;
            lastStacks = stacks;
            base.OnExpire(state);
        }

        public override void OnCleanse(CharacterState state)
        {
            if (uniqueTag != 0)
            {
                state.RemoveDamageModifier($"{data.statusName}_{uniqueTag}", type, elementalAspect, physicalAspect);
            }
            else
            {
                state.RemoveDamageModifier(data.statusName, type, elementalAspect, physicalAspect);
            }
            lastCharacter = null;
            lastStacks = stacks;
            base.OnCleanse(state);
        }
    }
}